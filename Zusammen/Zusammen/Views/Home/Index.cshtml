@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Home Page";
    var user = UserManager.GetUserAsync(User).Result;

}
@model HomeModel

<div class="text-center">
    <h1 class="display-4">Welcome to Zusammen</h1>
    @if (User.Identity.IsAuthenticated)
        {
        <canvas id="myCanvas" width="1000" height="400" style="border:1px solid #000000;">
        </canvas>

        }
</div>

<script>
    var items = @Html.Raw(Json.Serialize(Model.items));
    console.log(items);
    var c = document.getElementById("myCanvas");
    var ctx = c.getContext("2d");
    var k = items.reduce((a, b) => Math.max(a, b), -Infinity);
    var l = 100;

    for (let i = 0; i < items.length; i++) {
        var r = l * (k - items[i]);
        var x = r * Math.cos(Math.random() * 2 * Math.PI) + (1000 / 2);
        var y = r * Math.sin(Math.random() * 2 * Math.PI) + (400 / 2);
        drawCircle(x, y, 40, i);
    }




    function drawCircle(xdist, ydist, radius, j) {
        ctx.beginPath();
        ctx.arc(xdist, ydist, radius, 0, 2 * Math.PI);
        ctx.stroke();
        if (xdist == 1000 / 2 && ydist == 400 / 2) {
            ctx.fillStyle = 'blue';
        } else {
            ctx.fillStyle = 'red';
        }
        
        ctx.fill();
        c.addEventListener('click', event => {
            var x = event.clientX - c.offsetLeft;
            var y = event.clientY - c.offsetTop;
            var distance = Math.sqrt(Math.pow(x - xdist, 2) + Math.pow(y - ydist, 2));
            if (distance <= radius) {
                @{
                    Random rand = new Random();
                    int randomNumber = rand.Next(0, 4);
                }
                window.location.href = "@Url.Action("Profile", "Home", new { id = @Model.appUsers[randomNumber].Id })";
            }

        });
    }

</script>